{% extends 'layout.twig' %}

{% block header %}
{{ parent() }}
<link rel="stylesheet" href="http://localhost/css/odt.css">

{% endblock %}

{% block contenido %}
<main class="mainOdt">
    <h1>Orden de trabajo</h1>
    <div class="tablero">
        <div class="col-tablero" data-idcolumna="pendientes">
            <div class="nom-col">
                <h3>Pendientes</h3>
            </div>
            <div class="contenido-col-pendientes">

            </div>
        </div>
        <div class="col-tablero" data-idcolumna="proceso">
            <div class="nom-col">
                <h3>Proceso</h3>
            </div>
            <div class="contenido-col-proceso">

            </div>
        </div>
        <div class="col-tablero" data-idcolumna="revision">
            <div class="nom-col">
                <h3>Revision</h3>
            </div>
            <div class="contenido-col-revision">

            </div>
        </div>
        <div class="col-tablero" data-idcolumna="finalizado">
            <div class="nom-col">
                <h3>Finalizadas</h3>
            </div>
            <div class="contenido-col-finalizado">

            </div>
        </div>
    </div>

    <!-- ************************************* INICIO MODAL DE REVISION  ***************************************************** -->
    <!-- <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasRightRevision"
        aria-labelledby="offcanvasRightRevisionLabel">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="offcanvasRightRevisionLabel">Revisar Orden</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body" id="bodyRevision">

        </div>
    </div> -->
    <!-- *************************************** FIN MODAL DE REVISION ******************************************************* -->
    <!-- ************************************* INICIO MODAL DE FINALIZACION ************************************************** -->
    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasRightFinalizacion"
        aria-labelledby="offcanvasRightFinalizacionLabel">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="offcanvasRightFinalizacionLabel">Finalizar orden</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body" id="bodyFinalizacion">
            <textarea name="" id="" class="w-100 form-control h-25"></textarea>
            <p>hola</p>
        </div>
    </div>
    <!--  *************************************** FIN MODAL DE FINALIZACION *************************************************** -->
</main>
{% endblock %}


{% block footer %}
<script>
    document.addEventListener("DOMContentLoaded", async () => {
        let idUnDecoded = "{{ session['login']['idusuario'] }}" // ME QUEDE ACAAAAAAAAAAAA
        const idusuario = idUnDecoded.toLowerCase()
        let rolUnDecoded = "{{ session['login']['rol'] }}";
        const rol = rolUnDecoded.toLowerCase();
        let cardIdCounter = 0;
        console.log("idusuario:", idusuario)
        function $(object = null) {
            return document.querySelector(object);
        }

        const droppables = document.querySelectorAll(".col-tablero");

        // Evento de arrastrar
        function addDragEvents(tarea) {
            // Cuando empieza a arrastrar
            tarea.addEventListener("dragstart", (e) => {
                tarea.classList.add("arrastrando");
                e.dataTransfer.setData("text", tarea.getAttribute("id")); // Almacenar el data-idtarea del elemento arrastrado

            });

            // Cuando termina de arrastrar
            tarea.addEventListener("dragend", () => {
                tarea.classList.remove("arrastrando");
            });
        }

        // Evento de click (solo ejemplo)
        function addClickEvent(tarea) {
            tarea.addEventListener("click", () => {
                const tareaid = tarea.getAttribute("id");
                console.log(tareaid);
            });
        }

        // Configurar las columnas para permitir soltar las tareas
        droppables.forEach((zona) => {
            // Permitir que el elemento se suelte
            zona.addEventListener("dragover", (e) => {
                e.preventDefault();
            });

            // Soltar el elemento en la nueva columna
            zona.addEventListener("drop", async (e) => {
                e.preventDefault();
                let redirigir = true
                const idTareaCard = e.dataTransfer.getData("text");
                console.log("IDTAREA:", idTareaCard)
                const tareaArrastrada = document.querySelector(`[id='${idTareaCard}']`); // div que contiene la card tarea
                console.log("tarea que esta siend arrastrada: ", tareaArrastrada)
                if (tareaArrastrada) {
                    const columnaDestino = zona.querySelector('.contenido-col-' + zona.getAttribute('data-idcolumna')); // div que es la columna "pendiente, proceso, revision, finalizada"
                    columnaDestino.appendChild(tareaArrastrada); // agregamos la CARD TAREA  a la columna respectiva
                    const columna = zona.getAttribute("data-idcolumna"); // obtenemos el atributo del div de la columna "pendiente/proceso/revision/finalizada"
                    console.log("DIV columnaDestino: ", columnaDestino)
                    console.log("NOMBRE COLUMNA: ", columna)
                    const idtarea = tareaArrastrada.getAttribute("data-idtarea"); // obtenemos el id de la tarea DEL CUAL ESTA SIENDO ARRASTRADA
                    console.log("ID de la tarea:", idtarea);
                    //ESTE SWITCH VERIFICA EN QUE DIV COLUMNA CAE LA TAREA CARD CUANDO ES ARRASTRADA
                    switch (columna) {
                        case "proceso": // SI CAE EN LA COLUMNA DE PROCESOS
                            if (tareaArrastrada.getAttribute("estado") === "proceso") {
                                redirigir = false
                                return
                            }
                            if (redirigir) {
                                console.log("la tarea esta ne la columan prodceso")
                                const idOdt = await registrarOdt(idtarea)
                                console.log(idOdt[0].id)
                                window.localStorage.setItem("idtarea", idtarea)
                                window.localStorage.setItem("idodt", idOdt[0].id)
                                window.location.href = `/${rol}/tareas/odt/registrar`
                            }
                            break;

                        case "revision": //SI LA CAE EN LA COLUMNA DE REVISION
                            if (tareaArrastrada.getAttribute("estado") === "proceso") {
                                // PROCESO DE LOGICA PARA ACTUALIZAR EL ESTADO DE LA ORDEN DE TRABAJO 'REVISION' SOLO Y CUANDO ESTE COMPLETADO                                
                                // VERIFICAR QUE LA ORDEN YA ESTE COMPLETADA AL 100%
                                //abrirModalSidebar("offcanvasRightRevision", "bodyRevision")
                            }
                        case "finalizado": // SI CAE EN LA COLUMNA FINALIZADO:
                            if (tareaArrastrada.getAttribute("estado") === "revision") {
                                // PROCESO DE LOGICA PARA ACTUALIZAR EL ESTADO DE LA ORDEN EN REVISION A FINALIZADO SOLO Y CUANDO ESTE COMPLETADA LA REVISION
                                abrirModalSidebar("offcanvasRightFinalizacion", "bodyFinalizacion")
                            }
                    }
                }
            });
        });

        async function abrirModalSidebar(modalId, bodyId) {
            const modalSidebar = document.getElementById(modalId); // Obtener el modal por ID
            const bsOffcanvas = new bootstrap.Offcanvas(modalSidebar); // Usar Bootstrap Offcanvas API
            bsOffcanvas.show(); // Mostrar el modal

            console.log('Modal abierto: ' + modalId); // Confirmar que la función se llama

            /*             // Limpiar y rellenar el modal con las evidencias
                        const modalEvidenciasContainer = document.getElementById(bodyId);
                        modalEvidenciasContainer.innerHTML = ''; // Limpiar el contenedor      */
        }

        async function registrarOdt(idtarea) {
            const formOdt = new FormData()
            formOdt.append("idtarea", idtarea)
            formOdt.append("creado_por", idusuario)
            const dataOdt = await fetch(`/${rol}/tareas/odt/registrar`, { method: 'POST', body: formOdt })
            const idodt = await dataOdt.json()
            return idodt
        }

        async function renderTareaCardOdt(tareaData) {
            const tarea = document.createElement("div");
            tarea.classList.add("tarea", "tarea-odt");

            const uniqueCardId = `odt-card-${++cardIdCounter}`;
            tarea.setAttribute("id", uniqueCardId); //este id es auto incrementable
            tarea.setAttribute("draggable", "true");
            tarea.setAttribute("estado", tareaData.estado)
            tarea.setAttribute("data-idtarea", tareaData.idtarea); // este es id de la tarea original

            const fechaInicio = new Date(tareaData.fecha_inicio).toLocaleDateString();
            const fechaVencimiento = new Date(tareaData.fecha_vencimiento).toLocaleDateString();

            // Procesar los responsables
            const responsablesArray = tareaData.responsables.split(", ");
            let responsablesText;
            if (responsablesArray.length > 1) {
                responsablesText = `${responsablesArray[0]} y ${responsablesArray.length - 1} más`;
            } else {
                responsablesText = responsablesArray[0];
            }

            tarea.innerHTML = `
                <h3>${tareaData.tarea}</h3>
                <div class="contenedor-responsables">
                    <img src="https://www.iconpacks.net/icons/1/free-user-group-icon-296-thumb.png"/>
                    <p>${responsablesText}</p>
                </div>
                <p class="creadapor">Creada por ${tareaData.creador}</p>
                <p class="activo-odt">${tareaData.activo}</p>
                
                <div class="contenedor-barra-general">
                    <div class="barra-contenedor">
                        <span class="porcentaje-${tareaData.clasificacion}"></span>                    
                    </div>
                    <p class="porcentaje-texto">${tareaData.clasificacion === 'finalizado' ? '100' : tareaData.clasificacion === 'iniciado' ? '50' : '0'}%</p>
                </div>
            `;

            tarea.addEventListener("click", ()=>{
                window.localStorage.removeItem("idodt")
                window.localStorage.setItem("idodt ") // COMPLETARLO DESPUES ***************************
                window.location.href = `/${rol}/tareas/odt/registrar`
            })

            return tarea;
        }

        async function renderTareaCardPendientes(tareaData) {
            const tarea = document.createElement("div");
            tarea.classList.add("tarea");
            // Incrementar el contador global y usarlo como el ID único
            const uniqueCardId = `tarea-card-${++cardIdCounter}`;
            console.log("uniqueCardId:", uniqueCardId)
            tarea.setAttribute("id", uniqueCardId)
            tarea.setAttribute("draggable", "true");
            tarea.setAttribute("data-idtarea", tareaData.idtarea); // Usar data-idtarea

            // Convertir las fechas a formato solo de fecha
            const fechaInicio = new Date(tareaData.fecha_inicio).toLocaleDateString();
            const fechaVencimiento = new Date(tareaData.fecha_vencimiento).toLocaleDateString();

            tarea.innerHTML = `
                <h3>${tareaData.descripcion}</h3>
                <div class="fechas-tarea">
                    <p>Inicia: ${fechaInicio}</p>
                    <p>Vence: ${fechaVencimiento}</p>
                </div>
                <p>${tareaData.plantarea}</p>
                <p>${tareaData.activo}</p>
                <div class="contenedor-prioridad">
                    <span class="prioridad-${tareaData.prioridad}"></span>
                    <p>${tareaData.prioridad}</p>
                </div>
            `;

            console.log(tarea)
            return tarea;

        }

        // Renderizar las tareas en la columna "Pendientes"
        async function renderKanban() {
            const ftareas = await fetch(`/transparenciawsrest/consulta/tareas/data`, { method: 'GET' });
            const ftareasOdt = await fetch(`/transparenciawsrest/consulta/tareasodt/0`, { method: 'GET' })
            const tareas = await ftareas.json();
            const tareasOdt = await ftareasOdt.json()

            console.log("tareas agregadas al kabnban: ", tareas)
            console.log("tareas de la odt generada: ", tareasOdt)
            const tpendientes = $(".contenido-col-pendientes");
            const tproceso = $(".contenido-col-proceso");
            const trevision = $(".contenido-col-revision");
            const tfinalizado = $(".contenido-col-finalizado");
            //const tproceso = $(".")

            for (let i = 0; i < tareas.length; i++) {
                const tareaCard = await renderTareaCardPendientes(tareas[i])

                switch (tareas[i].estado) {
                    case 'pendiente':
                        // Agregar los eventos de arrastre y click
                        addDragEvents(await tareaCard);
                        addClickEvent(await tareaCard);

                        // Agregar la tarea a la columna "Pendientes"
                        tpendientes.appendChild(await tareaCard);
                        break;

                    /* case 'proceso':
                        const tareaCardProceso = await renderTareaCard(data[i])
                        addDragEvents(await tareaCard);
                        addClickEvent(await tareaCard);
                        break; */
                }
            }

            for (let i = 0; i < tareasOdt.length; i++) {
                const tareaCard = await renderTareaCardOdt(tareasOdt[i])
                switch (tareasOdt[i].estado) {
                    case 'proceso':
                        addDragEvents(await tareaCard);
                        addClickEvent(await tareaCard);

                        // Agregar la tarea a la columna "Pendientes"
                        tproceso.appendChild(await tareaCard);
                        break;

                    default:
                        break;
                }
            }
        }

        await renderKanban();
    });


</script>


{% endblock %}