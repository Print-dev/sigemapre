{% extends 'layout.twig' %}

{% block header %}
{{ parent() }}
<link rel="stylesheet" href="http://localhost/css/registrarOdt.css">

{% endblock %}

{% block contenido %}
<main class="mainRegOdt">
    <div class="contenedor-general">
        <div class="contenedor-diagnostico-evidencia">
            <h2>Evidencias</h2>
            <div class="contenedor-evidencias">
                <input type="file" name="evidencia[]" id="evidencias-img-input" class="custom-file-input"
                    accept="image/*">
                <label id="file-status" for="evidencias-img-input" class="custom-file-label">Selecciona imágenes</label>
                <div id="preview-container" class="preview-container">
                    <p id="no-images-text" class="no-images-text">No hay imágenes seleccionadas aún</p>
                </div>
            </div>

            <div class="contenedor-diagnostico-entrada">
                <h2>Dianostico de Entrada</h2>
                <textarea class="comment-textarea" placeholder="Escribe tu comentario aquí..."></textarea>
            </div>
        </div>
        <div class="contenedor-tarea">

        </div>
        <div class="contenedor-responsables">
            <h2>Asignar Responsables</h2>
            <button class="btn btn-primary" type="button" id="btnAsignarResponsable" data-bs-toggle="offcanvas"
                data-bs-target="#offcanvasRightResponsables" aria-controls="offcanvasRightResponsables">Asignar Responsable</button>
            <div class="contenedor-responsables-asignados">
                <ul>
                </ul>
            </div>
        </div>
    </div>
    <button id="btnCrearOdt" disabled>Crear Odt</button>
    <!-- Modal -->
    <!-- Estructura del modal con cabecera, cuerpo y pie -->

    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasRightResponsables" aria-labelledby="offcanvasRightResponsablesLabel">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="offcanvasRightResponsablesLabel">Offcanvas right</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <h3>Asignar un responsable</h3>
            <p>Usuarios disponibles.</p>
            <table class="tUsuarios">
                <thead>
                    <th>#</th>
                    <th>Usuario</th>
                    <th>Estado</th>
                    <th>Rol</th>
                </thead>
                <tbody class="tbodyUsuarios">

                </tbody>
                <button id="btnConfirmarAsignacion" disabled>Confirmar</button>
            </table>
        </div>
    </div>

    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasRightEvidencias"
        aria-labelledby="offcanvasRightEvidenciasLabel">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="offcanvasRightEvidenciasLabel">Offcanvas right</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <h2>Lista de todas las evidencias</h2>
            <div id="modal-evidencias-container">
                <!-- Aquí se agregarán las evidencias -->
                <p>Esto es un texto de prueba dentro de modal-content.</p> <!-- Este texto debe aparecer -->
            </div>
        </div>
    </div>

</main>
{% endblock %}

{% block footer %}
<script>
    document.addEventListener("DOMContentLoaded", async () => {
        //VARIABLES GLOBALES - permitiran gestionar si una columna ha sido modificada, es decir esto verificara que todo haya sido por lo menos agregado algo para habilitar el boton de generar ODT
        let colResponsablesOk = false;
        let colDiagnosticoOk = false;

        function $(object = null) {
            return document.querySelector(object);
        }

        function $all(object = null) {
            return document.querySelectorAll(object);
        }

        const btnCrearOdt = $("#btnCrearOdt")
        const listResponsablesAsignados = $(".contenedor-responsables-asignados ul")
        let responsables_asignados_lista = []
        const checkboxes = $all(".usuario-checkbox")
        const previewContainer = document.getElementById("preview-container");
        let habilitarBeforeUnload = true;

        //let iddiagnostico = -1
        //window.localStorage.getItem("diganosticoGenerado") ? window.localStorage.getItem("diganosticoGenerado") : 
        //window.localStorage.getItem("iddiagnosticoGenerado") ? window.localStorage.getItem("iddiagnosticoGenerado") :
        let diganosticoGenerado = false
        let iddiagnosticoGenerado = -1;
        const diagnostico = $(".comment-textarea");


        //SE REGISTRARA DE INMEDIATO EL DIAGNOSTICO PARA YA TENERLO PRESENTE Y PRESENTAR EVIDENCIAS
        await loadUI()

        async function loadUI() {
            await renderTableUsuarios()
            await renderTareaOdt(window.localStorage.getItem("idodt"))
            await renderResponsablesOdt()

            //alert(id)
            estadoBotonConfirmarAsignacion()
        }
        //alert("ID DIAGNOSTICO: ", iddiagnostico)
        function estadoBotonConfirmarAsignacion() {
            const checkboxes = $all(".usuario-checkbox");
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener("change", () => {
                    const algunoSeleccionado = Array.from(checkboxes).some(chk => chk.checked);
                    btnConfirmarAsignacion.disabled = !algunoSeleccionado;
                });
            });
        }

        //ESTO OBTENDRA LA TAREA CUANDO SE REGISTRA UNA NUEVA ODT
        async function obtenerTareaOdt(idodt) {
            const dataTareaOdt = await fetch(`/transparenciawsrest/consulta/tareaodt/${idodt}`)
            const tareaOdt = dataTareaOdt.json()
            return tareaOdt
        }

        async function obtenerRecursosPorTarea(idtarea) {
            const dataRecursosTareaOdt = await fetch(`/transparenciawsrest/consulta/recursos/tarea/${idtarea}`)
            const recursosTareaOdt = dataRecursosTareaOdt.json()
            return recursosTareaOdt
        }

        async function renderTareaOdt(idodt) {
            const tareaOdt = await obtenerTareaOdt(idodt);
            console.log("tareaOdt", tareaOdt);
            const contenedorTarea = $(".contenedor-tarea");

            tareaOdt.forEach(async (tarea) => {
                const recursosTareaOdt = await obtenerRecursosPorTarea(tarea.idtarea);
                console.log("recursosTareaOdt", recursosTareaOdt);

                // Crear la lista de recursos en formato <li>
                let recursosHTML = '';
                recursosTareaOdt.forEach(recurso => {
                    recursosHTML += `<li>${recurso.nombre}</li>`;
                });

                // Renderizar la tarea junto con los recursos
                contenedorTarea.innerHTML += `
                    <p>${tarea.plantarea}</p>
                    <h2>${tarea.tarea}</h2>
                    <div class="contenedor-detalles-tarea">
                        <p>Activo: ${tarea.activo}</p>
                        <p>Duración: ${tarea.duracion}</p>
                    </div>       
                    <hr>
                    <br>
                    <h2>Recursos</h2>  
                    <div class="contenedor-recursos-tarea">
                        <ul>
                            ${recursosHTML}
                        </ul> 
                    </div>  
                                     
                `;
            });
        }

        async function renderTableUsuarios() {
            const tbodyUsuarios = $(".tbodyUsuarios")
            const dataUsuarios = await obtenerUsuarios()
            for (let i = 0; i < dataUsuarios.length; i++) {
                console.log("dataUsuarios: ", dataUsuarios)
                tbodyUsuarios.innerHTML += `
                <tr>
                    <th scope="row">
                      <input type="checkbox" class="usuario-checkbox" data-usuario-id="${dataUsuarios[i].idusuario}" value="${dataUsuarios[i].idusuario}">
                    </th>
                    <td>${dataUsuarios[i].usuario}</td>                  
                    <td>${dataUsuarios[i].estado}</td>
                    <td>${dataUsuarios[i].rol}</td>                    
                </tr>
                `
            }
        } // TERMINADO


        // ESPACIO PARA CREAR LA ACCION DE ABRIR Y CERRAR MODELO
        const btnAbrirModal = $('#btnAsignarResponsable');
        const btnConfirmarAsignacion = $('#btnConfirmarAsignacion');

        // Acción en el botón de Confirmar (solo como ejemplo)
        btnConfirmarAsignacion.addEventListener('click', async () => {
            const checkboxes = $all(".usuario-checkbox")
            await registrarResponsable()
            checkboxes.forEach(checkbox => {
                checkbox.checked = false;
            });

            // Limpiar la lista de responsables asignados
            responsables_asignados_lista = [];
            estadoBotonConfirmarAsignacion()
        });

        async function registrarResponsablesAsignados(idresponsable) {
            console.log("ID ODT A ASIGNARLE: ", window.localStorage.getItem("idodt"))
            const formResponsableAsignado = new FormData()
            formResponsableAsignado.append("idorden_trabajo", window.localStorage.getItem("idodt"))
            formResponsableAsignado.append("idresponsable", idresponsable)
            const fresponsableId = await fetch(`/usuario/usuarios/responsablesasignados/registrar`, { method: 'POST', body: formResponsableAsignado })
            const responsableId = fresponsableId.json()
            return responsableId
        }

        async function registrarResponsable() {
            const chkboxesMarcados = $all(".usuario-checkbox:checked");
            chkboxesMarcados.forEach(chkbox => {
                responsables_asignados_lista.push(chkbox.value)
            })

            console.log('Responsables asignados:', responsables_asignados_lista);
            // EL ID RESPONSABLE SE REFIERE AL IDUSUARIO , osea son lo mismo solo que yo le puse diferente nombre por tabla
            if (responsables_asignados_lista.length > 0) {
                for (let i = 0; i < responsables_asignados_lista.length; i++) {
                    const responsableId = await registrarResponsablesAsignados(responsables_asignados_lista[i]);
                    console.log("responsableId: ", responsableId)
                    const usuarioData = await obtenerUsuario(responsables_asignados_lista[i])
                    console.log(usuarioData)
                    listResponsablesAsignados.innerHTML += `
                        <li data-id=${responsableId} data-idresponsable=${usuarioData[0].idusuario}>  
                            ${usuarioData[0].usuario}
                            <button class="btn-eliminar-responsable" data-id=${responsableId} data-idresponsable=${usuarioData[0].idusuario}>Eliminar</button>
                        </li>
                    `
                }
                colResponsablesOk = true
                await crearOdt() // UNA VEZ TENIENDO RESPONSABLES ASIGNADOS podremos finalizar el registro de la ODT
                await eliminarLiResponsable()
            }
        }

        async function obtenerUsuario(idusuario) {
            const fUsuario = await fetch(`/transparenciawsrest/consulta/usuario/${idusuario}`, { method: 'GET' })
            const usuarioData = await fUsuario.json()
            return usuarioData
        }

        async function obtenerUsuarios() {
            const fUsuarios = await fetch(`/transparenciawsrest/consulta/usuarios/data`, { method: 'GET' })
            const usuarios = fUsuarios.json()
            return usuarios
        } //TERMINADO

        async function obtenerResponsablesPorOdt(idorden_trabajo) {
            const fResponsables = await fetch(`/transparenciawsrest/consulta/responsables/${idorden_trabajo}`, { method: 'GET' })
            const responsablesData = fResponsables.json()
            return responsablesData
        }

        async function renderResponsablesOdt() {
            const responsablesData = await obtenerResponsablesPorOdt(window.localStorage.getItem("idodt"))
            console.log("responsablesData: ", responsablesData)
            for (let i = 0; i < responsablesData.length; i++) {
                listResponsablesAsignados.innerHTML += `
                    <li data-id=${responsablesData[i].idresponsable_asignado} data-idresponsable=${responsablesData[i].idresponsable}>
                        ${responsablesData[i].usuario}
                        <button class="btn-eliminar-responsable" data-id=${responsablesData[i].idresponsable_asignado} data-idresponsable=${responsablesData[0].idresponsable}>Eliminar</button>
                    </li>
                `
            }
            if (responsablesData.length > 0) {
                alert("SI HAY RESPONSABLES")
                colResponsablesOk = true
            }
            await crearOdt()
            await eliminarLiResponsable()
        }

        async function eliminarLiResponsable() {
            let eliminado = false;
            const botonesEliminarResponsable = $all(".btn-eliminar-responsable");
            botonesEliminarResponsable.forEach(boton => {
                boton.addEventListener('click', async (event) => {
                    const idresponsable = event.target.getAttribute("data-id");
                    //alert(idresponsable) DEPURAR CUANDO SEA NECESARIO
                    eliminado = await eliminarResponsablesOdt(idresponsable);
                    if (!eliminado) {
                        alert("OCURRIO UN ERROR AL ELIMINAR RESPONSABLE")
                    }
                    responsables_asignados_lista = responsables_asignados_lista.filter(id => id !== idresponsable);
                    // Actualizar el DOM eliminando el elemento <li>
                    const listItem = document.querySelector(`li[data-id="${idresponsable}"]`);
                    if (listItem) {
                        listItem.remove();
                    }
                    //VERIFICAR SI HAY AUN RESPONSABLES ASIGNADOS REGISTRADOS 
                    const responsablesData = await obtenerResponsablesPorOdt(window.localStorage.getItem("idodt"))
                    console.log("responsablesData: ", responsablesData)

                    if (responsablesData.length > 0) {
                        colResponsablesOk = true
                    } else {
                        btnCrearOdt.disabled = true
                    }

                });
            });
        }

        async function eliminarResponsablesOdt(idresponsableasignado) {
            const fResEliminacion = await fetch(`/usuario/tareas/plantareas/responsableasignado/${idresponsableasignado}`, { method: 'DELETE' })
            const responsableEliminado = fResEliminacion.json()
            return responsableEliminado
        }

        async function registrarDiagnosticoEntrada(diagnostico) {
            const formDiagnostico = new FormData();
            formDiagnostico.append("idordentrabajo", window.localStorage.getItem("idodt"));
            formDiagnostico.append("idtipodiagnostico", 1); // 1 = entrada, 2 = salida
            formDiagnostico.append("diagnostico", diagnostico);
            const fodt = await fetch(`/usuario/odt/diagnostico/registrar`, { method: 'POST', body: formDiagnostico })
            const odtreg = fodt.json()
            return odtreg
        }

        const fileStatus = $("#file-status")
        const evidenciasInput = $("#evidencias-img-input")
        // *------------------------------------------- EVENTOS -----------------------------------------------------*
        evidenciasInput.addEventListener('change', async (e) => {
            if (iddiagnosticoGenerado == -1) {
                // Verificar que haya un diagnóstico antes de subir las evidencias
                if (!diagnostico.value.trim()) {
                    alert("AGREGA UN DIAGNOSTICO INICIAL PRIMERO");
                } else {
                    // Registrar diagnóstico
                    const id = await registrarDiagnosticoEntrada(diagnostico.value);
                    if (id > 0) {
                        console.log("Diagnóstico registrado con ID:", id);
                        iddiagnosticoGenerado = id; // Actualizar ID del diagnóstico
                        diganosticoGenerado = true;
                        //window.localStorage.setItem("iddiagnosticoGenerado", iddiagnosticoGenerado)
                        //window.localStorage.setItem("diagnosticoGenerado", diganosticoGenerado)
                        colDiagnosticoOk = true;
                        await crearOdt()
                        await registrarEvidencias(e)
                        renderEvidencias(e); // Mostrar las evidencias en el preview
                        // Subir las evidencias (llamar la función que maneja las evidencias aquí)
                        //await manejarEvidencias(e, iddiagnosticoGenerado);
                    }
                }
            } else if (diganosticoGenerado && iddiagnosticoGenerado != -1) {
                // Diagnóstico ya creado, subir evidencias
                console.log("YA NO ES NECESARIO CREAR EL DIAGNOSTICO NUEVAMENTE");
                await crearOdt()
                await registrarEvidencias(e)
                renderEvidencias(e); // Mostrar las evidencias en el preview
                //Logica para traer la informacion del diagnostico
                //await manejarEvidencias(e, iddiagnosticoGenerado);
            }
        })

        // Evento que detecta cuando el usuario intenta salir de la página
        window.addEventListener("beforeunload", (event) => {
            if (habilitarBeforeUnload) {
                (async () => {
                    await eliminarOdt(window.localStorage.getItem("idodt"));
                })();
                window.localStorage.removeItem("idodt");
                event.preventDefault(); // Ya no es necesario en la mayoría de los navegadores, pero se deja por compatibilidad
                event.returnValue = ''; // Requerido para mostrar el diálogo de confirmación de salida
            }
        });

        function renderEvidencias(e) {
            const files = e.target.files;

            // Limpiar el contenedor antes de agregar nuevas imágenes
            previewContainer.innerHTML = '';

            if (files.length > 0) {
                for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    const reader = new FileReader();

                    reader.onload = function (event) {
                        const figureElement = document.createElement('figure');
                        const imgElement = document.createElement('img');
                        imgElement.src = event.target.result; // Mostrar la imagen como previa

                        const figcaptionElement = document.createElement('figcaption');
                        figcaptionElement.textContent = 'Ver todas las evidencias';

                        // Añadir el event listener para abrir el modal
                        figcaptionElement.addEventListener('click', function () {
                            abrirModalSidebar('offcanvasRightEvidencias');
                        });


                        // Añadir img y figcaption al figure
                        figureElement.appendChild(imgElement);
                        figureElement.appendChild(figcaptionElement);

                        // Añadir figure al contenedor
                        previewContainer.appendChild(figureElement);
                    }

                    reader.readAsDataURL(file); // Leer el archivo como una URL de datos
                }
            }
        }

        async function abrirModalSidebar(modalId) {
            const modalSidebar = document.getElementById(modalId); // Obtener el modal por ID
            const bsOffcanvas = new bootstrap.Offcanvas(modalSidebar); // Usar Bootstrap Offcanvas API
            bsOffcanvas.show(); // Mostrar el modal

            console.log('Modal abierto: ' + modalId); // Confirmar que la función se llama

            // Limpiar y rellenar el modal con las evidencias
            const modalEvidenciasContainer = document.getElementById("modal-evidencias-container");
            modalEvidenciasContainer.innerHTML = ''; // Limpiar el contenedor

            // Obtener evidencias desde la API o fuente de datos
            const evidenciasObtenidas = await obtenerEvidencias(iddiagnosticoGenerado);
            console.log("Evidencias obtenidas: ", evidenciasObtenidas);

            // Iterar sobre cada evidencia y crear elementos de imagen
            evidenciasObtenidas.forEach(evidenciaObj => {
                const imgSrc = evidenciaObj.evidencia; // Acceder a la propiedad 'evidencia' del objeto
                const imgElement = document.createElement('img');
                imgElement.src = `http://localhost/img/subidas/${imgSrc}`; // Ajustar la ruta a la imagen
                imgElement.alt = `Evidencia ${imgSrc}`;
                imgElement.classList.add('modal-img'); // Añadir clase para estilo (opcional)

                // Añadir la imagen al contenedor del modal
                modalEvidenciasContainer.appendChild(imgElement);
            });
        }



        function cerrarModalSidebar() {
            const modalSidebar = document.getElementById("modal-sidebar");
            modalSidebar.classList.remove('show'); // Remover clase para ocultar el modal

        }

        async function crearOdt() {
            if (colDiagnosticoOk && colResponsablesOk) {
                btnCrearOdt.disabled = false
                alert("EL REGISTRO DE LA ODT HA SIDO FINALIZADA, puedes proceder a darle clikc")
                btnCrearOdt.addEventListener("click", async () => {
                    habilitarBeforeUnload = false;
                    const datosActualizar = {
                        idordentrabajo: window.localStorage.getItem("idodt"),
                        borrador: 0
                    }
                    const fOdtActualizado = await fetch(`/usuario/tareas/odt/actualizar`, { method: 'PUT', body: JSON.stringify(datosActualizar), headers: { 'Content-Type': 'application/json' } })
                    const estadoBorradorCambiado = fOdtActualizado.json()
                    window.localStorage.removeItem("idodt") //esto lo borrare para cuando se intente regresar no se pueda modificar ocasionando confusiones y bugs
                    await actualizarEstadoTarea()
                    if (estadoBorradorCambiado) {
                        alert("EL ODT YA  NO ES BORRADOR: ", estadoBorradorCambiado)
                        window.location.href = '/usuario/tareas/odt'
                    }
                })
            }
        }

        async function registrarEvidencias(e) {
            // Obtener el archivo seleccionado del input
            const evidenciaFile = e.target.files[0]; // Toma el primer archivo seleccionado

            // Verificar que el archivo exista
            if (!evidenciaFile) {
                alert("No se ha seleccionado ningún archivo.");
                return;
            }

            // Crear el objeto FormData y añadir los datos
            const formEvidencia = new FormData();
            formEvidencia.append("iddiagnostico", iddiagnosticoGenerado);
            formEvidencia.append("evidencia", evidenciaFile); // Aquí se añade el archivo de evidencia (imagen)

            const Frespuesta = await fetch(`/usuario/odt/diagnostico/evidencia/registrar`, { method: 'POST', body: formEvidencia })
            const subido = await Frespuesta.json()
            console.log("se subio la imagen? ", subido)


        }

        async function obtenerEvidencias(iddiagnostico) {
            const fEvidencias = await fetch(`/transparenciawsrest/consulta/evidencias/diagnostico/${iddiagnostico}`, { method: 'GET' })
            const evidencias = await fEvidencias.json()
            return evidencias
        }

        async function eliminarOdt(idordentrabajo) {
            const Fborrado = await fetch(`/usuario/tareas/odt/${idordentrabajo}`, { method: 'DELETE' })
            const borrado = Fborrado.json()
            return borrado
        }

        async function actualizarEstadoTarea() {
            const datosActualizar = {
                idtarea: window.localStorage.getItem('idtarea'),
                idestado: 2
            }
            const FestadoTareaCambiada = await fetch(`/usuario/tareas/estado/actualizar`, { method: 'PUT', body: JSON.stringify(datosActualizar), headers: { 'Content-Type': 'application/json' } })
            const estadoCambiado = await FestadoTareaCambiada.json()
            return estadoCambiado
        }

    })
</script>
<!--  <div class="contenedor-comentario">
                        <h2>Comentario (opcional)</h2>
                        <textarea class="comment-textarea" placeholder="Escribe tu comentario aquí..."></textarea>
                    </div>    -->
{% endblock %}